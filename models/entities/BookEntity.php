<?php

namespace app\models\entities;

use Yii;
use yii\base\ErrorException;
use yii\base\InvalidConfigException;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\helpers\FileHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "book".
 *
 * @property int $id
 * @property string $title
 * @property string|null $description
 * @property string|null $picture
 * @property string|null $date
 * @property string $created_at
 * @property string $updated_at
 *
 * @property BookAuthorEntity[] $bookAuthors
 * @property AuthorEntity[] $authors
 */
class BookEntity extends ActiveRecord
{
    public const DEFAULT_PICTURE = 'no_image.png';

    public array $selectedAuthors = [];
    public string $file = '';
    public string $checkPicture = '';

    public function behaviors(): array
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    public static function tableName(): string
    {
        return 'book';
    }

    public function rules(): array
    {
        return [
            [['title', 'selectedAuthors'], 'required'],
            [['title', 'description'], 'trim'],
            [['title'], 'string', 'min' => 2, 'max' => 200],
            [['description'], 'string', 'min' => 20, 'max' => 500],
            [['date'], 'date', 'format' => 'php:Y-m-d'],
            [['file'], 'image', 'skipOnEmpty' => true, 'extensions' => 'png, jpg, jpeg', 'maxSize' => 2000048],
            [['picture'], 'string', 'max' => 255],
            [['picture'], 'default', 'value' => null],
            [['created_at', 'updated_at'], 'safe'],
        ];
    }

    public function attributeLabels(): array
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'title' => Yii::t('app', 'Title'),
            'description' => Yii::t('app', 'Description'),
            'picture' => Yii::t('app', 'Picture'),
            'file' => Yii::t('app', 'Picture'),
            'date' => Yii::t('app', 'Date'),
            'selectedAuthors' => Yii::t('app', 'Authors'),
            'author_id' => Yii::t('app', 'Authors'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ];
    }

    /**
     * @param bool $insert
     * @return bool
     * @throws ErrorException
     */
    public function beforeSave($insert): bool
    {
        $file = UploadedFile::getInstance($this, 'file');
        $clearPicture = Yii::$app->request->post('BookEntity')['checkPicture'];
        $storage = Yii::getAlias('@storage') . DIRECTORY_SEPARATOR;
        $pathDir = '';
        $newFolder = true;

        if ($insert && !$file) {
            return parent::beforeSave($insert);
        }

        if(!$insert) {

            if (!$file && !$this->picture && !$clearPicture) {
                return parent::beforeSave($insert);
            }  // all parameters are empty

            if (!$file && $this->picture && !$clearPicture) {
                return parent::beforeSave($insert);
            } // the previously uploaded image has not been modified or deleted

            if(!$file && $this->picture && $clearPicture && file_exists($storage . $this->picture)) {
                self::deleteDirectoryImage($this->picture);
                $this->picture = null;
                return parent::beforeSave($insert);
            }  // the previously uploaded image was deleted

            if($file && $this->picture && file_exists($storage . $this->picture)) {
                self::deleteDirectoryImage($this->picture);
                $path_parts = pathinfo($this->picture);
                $pathDir = $path_parts['dirname'] . '/';
            } // download and replace old image

        }

        if (!$pathDir) {
            $pathDir = date('y-m-d.h:i:s') . '/';
        }

        if (!is_dir($storage . $pathDir)) {
            $newFolder = mkdir($storage . $pathDir, 0755);
        }

        if (!$newFolder) {
            return false;
        }

        $fileName = sprintf('%s_%s.%s', time(), md5($file->baseName), $file->extension);

        $this->picture = $pathDir . $fileName;
        $file->saveAs($storage . $this->picture);

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /* public function getBookAuthors(): ActiveQuery
     {
         return $this->hasMany(BookAuthorEntity::class, ['book_id' => 'id']);
     }*/

    /**
     * @return ActiveQuery
     * @throws InvalidConfigException
     */
    public function getAuthors(): ActiveQuery
    {
        try {
            return $this->hasMany(AuthorEntity::class, ['id' => 'author_id'])
                ->viaTable('book_author', ['book_id' => 'id']);
        } catch (InvalidConfigException $e) {
            throw new InvalidConfigException($e->getMessage());
        }
    }

    public static function getAllAuthors(): array
    {
        $authors = AuthorEntity::find()->select(['id', 'last_name', 'first_name', 'middle_name'])->asArray()->all();

        return self::getFullNameAuthor($authors);
    }

    public static function getBookFullNameAuthor(int $id): string
    {
        $authors = BookAuthorEntity::find()
            ->joinWith(['author'], true)
            ->select(['author.id', 'author.last_name', 'author.first_name', 'author.middle_name'])
            ->where(['book_id' => $id])
            ->asArray()
            ->all();

        return implode(', ', self::getFullNameAuthor($authors));
    }

    public static function getFullNameAuthor(array $authors): array
    {
        $result = [];

        if (!$authors) {
            return $result;
        }

        foreach ($authors as $author) {
            if ($author['middle_name']) {
                $result[$author['id']] = "{$author['last_name']} {$author['first_name']} {$author['middle_name']}";
            } else {
                $result[$author['id']] = "{$author['last_name']} {$author['first_name']}";
            }
        }

        return $result;
    }

    public function getSelectAuthors(array $idAuthors): array
    {
        $result = [];

        foreach ($idAuthors as $author) {
            $result[$author] = ['Selected' => 'selected'];
        }

        return $result;
    }

    /**
     * @param string|null $dir
     * @throws ErrorException
     */
    public static function deleteDirectoryImage(?string $dir): void
    {
        if($dir === null) {
            return;
        }

        $path_parts = pathinfo($dir);
        FileHelper::removeDirectory(Yii::getAlias('@storage') . DIRECTORY_SEPARATOR . $path_parts['dirname']);
    }
}
